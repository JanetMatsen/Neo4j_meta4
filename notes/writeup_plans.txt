=== Goals ===
  -
  - emphasize focus on sub-graphs containing multiple species.
  - work is on GitHub:
=== Approach ===
  - don't want to find TC.  Scales with N^2, the number of nodes.
  - instead use connected components.
    - iterative procedure that stores only N lables
  - use Neo4j to do so
    - can label the nodes according to their connected component
    - found a Java package that implements the algorithm.
=== Pros and Cons of using Neo4j ===
  - Pros:
    - programmer-friendly query language, Cypher
    - allows for shape-based pattern matching
      - eventually something we want: chain of nodes like
        (metabolite production organism:A) --> (metabolite export organism:A) --> (metabolite import organism:B) --> (metabolite use organism:B)
    - easy to visualize (portions of) results in web front-end.
  - Cons:
    - not parallelizable
      - Just having multiple clients is not parallel
      - can scale separate queries across server: node-based locking
      - can't scale a single query across servers
      - Just using a bigger computer is not enough
- Alternatives I could have chosen
  - syntactic layers that make traditional RDBMSs have graph-qurey like APIs
    - The Case Against Specialized Graph Analytics Engines. CIDR 2015
      - summary:
      - to account for the programmer-friendly APIs of graph databases, they wrote
        Grail, a syntatic layer that communicates graph-DB-style queries to SQL
      - questions:
        - Giraph versus Neo4j?
          - Giraph uses message passing.  What about Neo4j?
          - Giraph runs on Hadoop.  More parallelizable?
    - ?? What would I do with them?
  - Myria
    - http://micans.org/mcl/
    - Shrainik later provided me code to run MCL on Myria (supplemental)
    - Myria would handle distribution of data across the database.
  - Datalog
    - discuss with Shrainik.
=== data preparation: ===
  - had access to a 50M row tsv file with one row per pair of genes
  - contained IDs that link the two genes and the partial correlation of the pair
  - merge on the organism name, the gene names.
  - add columns for association: positive or negative
  - add column for whether edge is cross-species.
  - merge on
  - prepared a toy sub-network with only two organism types
  - merge on
=== Loading data ===
  - data is loaded via Neo4j queries
  - make one databasse per pcor cutoff value
  - first wipe out the existing DB's data (paste in query: "MATCH (n) \n OPTIONAL MATCH (n)-[r]-() \n DELETE n, r")
  - print the loading time for later analysis in Python.
  - image of a sub-network with node & edge properties.

=== Queries ===
- connected components:
  - use package Neo4jSNA, Neo4j version ___.
  - not including singletons: not relevant to the biological questions

=== results (Include an evaluation section, with graphs.): ===
- note distribution of edge weights; affects interpretation of filtering.
  - when you vary the threshold,
    - number of nodes
      - distribution of species?
    - time for building network is ____(?nonlinear) with # of nodes
      - plot time vs cutoff, time vs # of nodes
    - Density of the graph: edges per node.
    - number and size of connected components
      - connectivity of connected components
  - using favorite graph, query for particular shapes
    - these types of query are the best part of Neo4j
=== Next steps: ===
  - this project was selected both to gain new database skills and to enhance research goals of the Lidstrom/Beck labs.
  - query for particular architectures.
    - includes biologically-intuitive genes:
      - metabolite production, export, import, use
        - start by export of one organism paired to import from another
        - need to label the nodes that are import/export; requires parsing gene names or something.
    - easy to use Cypher to query for motif shapes
  - Recommendations moving forward
    - for large networks, use Myria (?)
    - don't write out a separate graph db for each cutoff
      - instead alter the Neo4jSNA code to only touch/use nodes with abs(pcor)
        above a particular value
=== Conclusion: ===
  - Skills I gained
    - Neo4j
      - query language, strengths, limitations
    - deciding what to do in which program framework:
      - describe connected components using Cypher, Java, or Python?
        - only do graphy stuff in Java
        - Cypher only for loading the database and visualizing.
        - can write Cypher queries to run from Java
    - using remote computation in new ways
      - SSHed into a computer and ran the jars I developed on my desktop.
